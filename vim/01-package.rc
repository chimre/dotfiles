" vim: set ft=vim :
scriptencoding utf-8

" definition
let s:package_root = g:vim_cache . '\pack\pm'
let s:package_always = '\start'
let s:package_lazy = '\opt'
let s:package_update_deny = s:package_root . '\update_deny'

" command
let s:command_git = {}
let s:command_git.install = 'git clone $url .'
let s:command_git.update = 'git pull origin master'

" function
function! s:get_package_info(command, url, always)
  let l:elements = split(a:url, '/')

  let l:package_info = {}
  let l:package_info.holder = l:elements[len(l:elements) - 2]
  let l:package_info.item = l:elements[len(l:elements) - 1]
  let l:package_info.option = a:always == 0 ? s:package_lazy : s:package_always
  let l:package_info.deploy = s:package_root . l:package_info.option . '/' . l:package_info.holder . '___' . l:package_info.item

  return l:package_info
endfunction

function! s:update_install_package(command, url, always, updatable)
  if a:url == ''
    return
  endif

  let l:package_info = s:get_package_info(a:command, a:url, a:always)
  let l:do_operation = 1
  let l:operation = ''

  if isdirectory(l:package_info.deploy) == 0
    call mkdir(l:package_info.deploy, 'p')
    let l:operation = substitute(a:command.install, '$url', a:url, 'g')
  else
    let l:do_operation = a:updatable
    let l:operation = substitute(a:command.update, '$url', a:url, 'g')
  endif

  if l:do_operation != 0
    call execute('cd ' . l:package_info.deploy)
    call execute('!' . l:operation)
  endif
endfunction

" startup
let s:updatable = !filereadable(s:package_update_deny)
if s:updatable != 0
  if isdirectory(s:package_root) == 0
    call mkdir(s:package_root, 'p')
  endif
  call writefile([''], s:package_update_deny)
endif
let s:current_directory = system('cd')

" update & install
call s:update_install_package(s:command_git, 'https://github.com/junegunn/vim-easy-align', 1, s:updatable)
call s:update_install_package(s:command_git, 'https://github.com/morhetz/gruvbox', 1, s:updatable)
call s:update_install_package(s:command_git, 'https://github.com/luochen1990/rainbow', 1, s:updatable)
call s:update_install_package(s:command_git, 'https://github.com/easymotion/vim-easymotion', 1, s:updatable)
call s:update_install_package(s:command_git, 'https://github.com/cocopon/vaffle.vim', 1, s:updatable)
call s:update_install_package(s:command_git, 'https://github.com/airblade/vim-gitgutter', 1, s:updatable)
call s:update_install_package(s:command_git, 'https://github.com/junegunn/fzf', 1, s:updatable)
call s:update_install_package(s:command_git, 'https://github.com/junegunn/fzf.vim', 1, s:updatable)
call s:update_install_package(s:command_git, 'https://github.com/Glench/Vim-Jinja2-Syntax', 1, s:updatable)
call s:update_install_package(s:command_git, 'https://github.com/unblevable/quick-scope', 1, s:updatable)
call s:update_install_package(s:command_git, 'https://github.com/Yggdroot/indentLine', 1, s:updatable)

" teardown
call execute('cd "' . s:current_directory . '"')

" export
let g:package_update_deny = s:package_update_deny

